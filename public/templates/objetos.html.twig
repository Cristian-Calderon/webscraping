{% extends "base-objetos.html.twig" %}

{% block title %}Lista de Objetos{% endblock %}

{% block content %}

<div class="container mt-5">
    <h1 class="text-center text-white">Lista de Objetos</h1>
    <button class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#addObjetoModal">‚ûï Agregar Objeto</button>
    <div class="mb-3">
        <input type="text" class="form-control" id="searchBar" placeholder="üîé Buscar objeto..." onkeyup="filtrarObjetos()">
    </div>
    <div class="row mt-4" id="objetos-container"></div>
</div>

<!-- Modal para agregar objeto -->
<div class="modal fade" id="addObjetoModal" tabindex="-1" aria-labelledby="addObjetoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="addObjetoModalLabel">Agregar Nuevo Objeto</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="objetoForm">
                    <div class="mb-3">
                        <label for="objetoNombre" class="form-label text-white">Nombre del Objeto</label>
                        <input type="text" class="form-control" id="objetoNombre" required>
                    </div>
                    <div class="mb-3">
                        <label for="objetoImagen" class="form-label text-white">URL de la Imagen</label>
                        <input type="text" class="form-control" id="objetoImagen" required>
                    </div>
                    <div class="mb-3">
                        <label for="objetoCosto" class="form-label text-white">Costo</label>
                        <input type="text" class="form-control" id="objetoCosto" required>
                    </div>
                    <div class="mb-3">
                        <label for="objetoDescripcion" class="form-label text-white">Descripci√≥n</label>
                        <textarea class="form-control" id="objetoDescripcion" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="agregarObjeto()">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para editar objeto -->
<div class="modal fade" id="editObjetoModal" tabindex="-1" aria-labelledby="editObjetoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="editObjetoModalLabel">Editar Objeto</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editObjetoForm">
                    <input type="hidden" id="editObjetoId">
                    <div class="mb-3">
                        <label for="editObjetoNombre" class="form-label text-white">Nombre del Objeto</label>
                        <input type="text" class="form-control" id="editObjetoNombre" required>
                    </div>
                    <div class="mb-3">
                        <label for="editObjetoImagen" class="form-label text-white">URL de la Imagen</label>
                        <input type="text" class="form-control" id="editObjetoImagen" required>
                    </div>
                    <div class="mb-3">
                        <label for="editObjetoCosto" class="form-label text-white">Costo</label>
                        <input type="text" class="form-control" id="editObjetoCosto" required>
                    </div>
                    <div class="mb-3">
                        <label for="editObjetoDescripcion" class="form-label text-white">Descripci√≥n</label>
                        <textarea class="form-control" id="editObjetoDescripcion" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="guardarEdicionObjeto()">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<script>
    let listaObjetos = []; // Variable global para almacenar objetos

    document.addEventListener("DOMContentLoaded", async function () {
        await cargarObjetos();
    });

    async function cargarObjetos() {
        try {
            const response = await fetch("/api/api.php?resource=objetos");
            listaObjetos = await response.json(); // Guardamos los objetos en la variable global
            mostrarObjetos(listaObjetos); // Mostramos todos los objetos
        } catch (error) {
            console.error("Error al cargar objetos:", error);
        }
    }

    function mostrarObjetos(objetos) {
        const container = document.getElementById("objetos-container");
        container.innerHTML = ""; // Limpiar la lista antes de renderizar

        objetos.forEach(objeto => {
            const objetoCard = `
            <div class="col-md-3 objeto-card animate__animated animate__fadeIn">
                <div class="card bg-secondary text-white mb-3">
                    <a href="/detalle_objeto?id=${objeto.id_item}">
                        <img src="${objeto.Imagen}" class="card-img-top" alt="${objeto.Nombre}">
                    </a>
                    <div class="card-body text-center">
                        <h5 class="card-title">${objeto.Nombre}</h5>
                        <p><strong>Costo:</strong> ${objeto.Costo}</p>
                        <button class="btn btn-outline-warning btn-sm mb-2" onclick="editarObjeto(${objeto.id_item}, '${objeto.Nombre}', '${objeto.Imagen}', '${objeto.Costo}', '${objeto.Descripcion}')">Editar</button>
                        <button class="btn btn-outline-danger btn-sm" onclick="eliminarObjeto(${objeto.id_item})">Eliminar</button>
                    </div>
                </div>
            </div>`;
            container.innerHTML += objetoCard;
        });
    }

    function filtrarObjetos() {
        let termino = document.getElementById("searchBar").value.toLowerCase();
        
        // Filtrar la lista de objetos almacenada en memoria (sin hacer otra petici√≥n al servidor)
        let objetosFiltrados = listaObjetos.filter(objeto =>
            objeto.Nombre.toLowerCase().includes(termino)
        );

        mostrarObjetos(objetosFiltrados); // Actualizar la lista mostrada
    }

    function agregarObjeto() {
        let nombre = document.getElementById("objetoNombre").value;
        let imagen = document.getElementById("objetoImagen").value;
        let costo = document.getElementById("objetoCosto").value;
        let descripcion = document.getElementById("objetoDescripcion").value;

        if (nombre && imagen && costo && descripcion) {
            fetch("/api/api.php?resource=objetos", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ Nombre: nombre, Imagen: imagen, Costo: costo, Descripcion: descripcion })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("‚úÖ Objeto agregado correctamente");
                    document.getElementById("objetoForm").reset();
                    bootstrap.Modal.getInstance(document.getElementById('addObjetoModal')).hide();
                    cargarObjetos(); // Recargar objetos
                } else {
                    alert("‚ùå Error al agregar objeto: " + data.error);
                }
            })
            .catch(error => console.error("‚ùå Error al agregar objeto:", error));
        } else {
            alert("‚ö†Ô∏è Todos los campos son obligatorios");
        }
    }

    function editarObjeto(id, nombre, imagen, costo, descripcion) {
        document.getElementById("editObjetoId").value = id;
        document.getElementById("editObjetoNombre").value = nombre;
        document.getElementById("editObjetoImagen").value = imagen;
        document.getElementById("editObjetoCosto").value = costo;
        document.getElementById("editObjetoDescripcion").value = descripcion || "";

        let editModal = new bootstrap.Modal(document.getElementById('editObjetoModal'));
        editModal.show();
    }

    function guardarEdicionObjeto() {
        let id = document.getElementById("editObjetoId").value;
        let nombre = document.getElementById("editObjetoNombre").value;
        let imagen = document.getElementById("editObjetoImagen").value;
        let costo = document.getElementById("editObjetoCosto").value;
        let descripcion = document.getElementById("editObjetoDescripcion").value;

        fetch("/api/api.php?resource=objetos", {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + getCookie("auth_token")
            },
            body: JSON.stringify({ id, Nombre: nombre, Imagen: imagen, Costo: costo, Descripcion: descripcion })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("‚úÖ Objeto actualizado correctamente");
                bootstrap.Modal.getInstance(document.getElementById('editObjetoModal')).hide();
                cargarObjetos();
            } else {
                alert("‚ùå Error al actualizar objeto: " + data.error);
            }
        })
        .catch(error => console.error("‚ùå Error al actualizar objeto:", error));
    }

    function eliminarObjeto(id) {
        if (!confirm("¬øEst√°s seguro de que deseas eliminar este objeto?")) {
            return;
        }

        fetch(`/api/api.php?resource=objetos&id=${id}`, {
            method: 'DELETE',
            headers: {
                "Authorization": "Bearer " + getCookie("auth_token"),
                "Content-Type": "application/json"
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("‚úÖ Objeto eliminado correctamente");
                cargarObjetos();
            } else {
                alert("‚ùå Error al eliminar: " + data.error);
            }
        })
        .catch(error => console.error("‚ùå Error en la eliminaci√≥n:", error));
    }

    function getCookie(name) {
        let cookieArr = document.cookie.split(";");
        for (let i = 0; i < cookieArr.length; i++) {
            let cookiePair = cookieArr[i].split("=");
            if (name.trim() === cookiePair[0].trim()) {
                return decodeURIComponent(cookiePair[1]);
            }
        }
        return null;
    }
</script>

<style>
    /* Fondo con imagen */
    body {
        background-image: url('https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/backgrounds/greyfade.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        color: white;
    }

    .objeto-card {
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

    .objeto-card:hover {
        transform: scale(1.05);
        box-shadow: 0px 0px 20px rgba(255, 255, 255, 0.5);
    }

    .modal-content {
        background-color: #343a40;
        color: white;
    }

    .btn-outline-light {
        border-color: #ffffff;
        color: #ffffff;
    }

    .btn-outline-light:hover {
        background-color: #ffffff;
        color: #343a40;
    }

    .btn-outline-warning {
        border-color: #ffc107;
        color: #ffc107;
    }

    .btn-outline-warning:hover {
        background-color: #ffc107;
        color: #343a40;
    }

    .btn-outline-danger {
        border-color: #dc3545;
        color: #dc3545;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: #ffffff;
    }
</style>

{% endblock %}