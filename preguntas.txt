Pasemos al punto numero 2 Scraping de datos, 1 disena el modelo de datos=> 
La pagina que voy a hacer Scraping es dotabuff: las tablas que todavia no he podido relacionar son las siguientes:

Tabla: User
id int
name-user varchar(50)
faceta
nivel varchar(12)
tasa-de-victoria varchar(12)
tasa-seleccion varchar(10)
tasa-prohibicion varchar(10)
url-hero text
url-faceta text

Tabla: list-heroes
id int
name varchar(50)
faceta varchar(50)
nivel varchar(12)
tasa-de-victoria varchar(12)
tasa-seleccion varchar(10)
tasa-prohibicion varchar(10)
url-hero text
url- faceta text

Tabla: heroes
id int
name varchar(50)
faceta
nivel varchar(12)
tasa-de-victoria varchar(12)
tasa-seleccion varchar(10)
tasa-prohibicion varchar(10)
url-hero text
url-faceta text

Tabla: faceta
id int
name varchar(50)
faceta
nivel varchar(12)
tasa-de-victoria

si tienes alguna recomendacion de como lo harias me ayudaria.



no entiendo la estructura del proyecto me puedes ayudar:
public  > index.php
        > test_db.php
        templates   > index.html.twig

src     > auth  > config.php
                > login.php
                > register.php
                > verify_token.php

y este es el contenido:
config.php:
<?php
$host = 'localhost';
$db   = 'webscraping';
$user = 'cristian';
$pass = '11011993';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);
} catch (PDOException $e) {
    die('Connection failed: ' . $e->getMessage());
}

$jwt_secret = "EyYqUxGhXFA4cagM5Qb6vaivpR18UzY2NXj4YTN7nEaMxfUGR00a0KoCuTZlbrLb
KcjUuyBdV9cOO00P6XUbaw=="; // Cambia esto por una clave secreta segura.

login.php:
<?php
require './config.phpconfig.php';
require '../../vendor/autoload.php';

use Firebase\JWT\JWT;
use Firebase\JWT\Key;

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $email = $_POST['email'];
    $password = $_POST['password'];

    $stmt = $pdo->prepare('SELECT * FROM users WHERE email = ?');
    $stmt->execute([$email]);
    $user = $stmt->fetch();

    if ($user && password_verify($password, $user['password'])) {
        $payload = [
            'iss' => 'http://webscraping.local',
            'aud' => 'http://webscraping.local',
            'iat' => time(),
            'exp' => time() + (60 * 60), // 1 hora de duración
            'sub' => $user['id'],
        ];

        $jwt = JWT::encode($payload, $jwt_secret, 'HS256');
        echo json_encode(['token' => $jwt]);
    } else {
        http_response_code(401);
        echo 'Credenciales incorrectas.';
    }
}

register.php:
<?php
require './config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = $_POST['password'];

    if (empty($username) || empty($email) || empty($password)) {
        die('Todos los campos son obligatorios.');
    }

    $hashedPassword = password_hash($password, PASSWORD_BCRYPT);

    $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (?, ?, ?)');
    try {
        $stmt->execute([$username, $email, $hashedPassword]);
        echo 'Registro exitoso.';
    } catch (PDOException $e) {
        if ($e->getCode() == 23000) {
            die('El correo electrónico ya está registrado.');
        }
        die('Error: ' . $e->getMessage());
    }
}

verify_token.php:
<?php
require './config.php';
require '../../vendor/autoload.php';

use Firebase\JWT\JWT;
use Firebase\JWT\Key;

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $authHeader = $_SERVER['HTTP_AUTHORIZATION'] ?? '';

    if (!preg_match('/Bearer\s(\S+)/', $authHeader, $matches)) {
        http_response_code(400);
        die('Token no proporcionado o formato inválido.');
    }

    $token = $matches[1];

    try {
        $decoded = JWT::decode($token, new Key($jwt_secret, 'HS256'));
        echo json_encode(['user_id' => $decoded->sub]);
    } catch (Exception $e) {
        http_response_code(401);
        die('Token inválido: ' . $e->getMessage());
    }
}
